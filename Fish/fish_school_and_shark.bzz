#Taylor Bergeron

shark_speed = 20#35#3.5 #35 mph
fish_speed = 40#62.137 #62 mph, tuna
timestep = 0
rand_num = 0.0

function init() {
   v = stigmergy.create(1)
   s_shark = swarm.create(1)
   s_shark.select(id == 0)
   s_fish = s_shark.others(2)
   # x_pos = pose.position.x
   # y_pos = pose.position.y
   # yaw = pose.orientation.yaw
   # var info = {.x = x_pos, .y = y_pos, .yaw = yaw}
   # v.put(id, info)
   v.put(id, 1.0)
   timestep = 0
   #math.rng.setseed(timestep*id)
   math.rng.setseed(id)
   rand_num = math.rng.uniform(0.0 , 1.0)
   v.put("fish_see_shark", 0.0)

}



function step() {
	timestep = timestep+1
	s_shark.exec(attack_fish)
	s_fish.exec(escape_shark)
   # put your code here
}

function attack_fish(){
	#
    # x_pos = pose.position.x
    # y_pos = pose.position.y
    # yaw = pose.orientation.yaw
	# var info = {.x = x_pos, .y = y_pos, .yaw = yaw}
	# v.put(id, info)

	fish_info = find_closest_fish()

	#if there is a close alive fish
	if(fish_info.id != -1){
		# ang = fish_info.angle - pose.orientation.yaw
		#log(ang)
        move_x = shark_speed * math.cos(fish_info.angle)
		move_y = shark_speed * math.sin(fish_info.angle)
		goto(move_x,move_y)
	}

}

function find_closest_fish(){
	min_dist = 1000000.0
	min_dist_fish_angle = 0.0
	min_dist_fish_id = -1
	neighbors.foreach(
  		function(rid, data) {
			#log("shark is neighbors with: ", rid)
			eaten = v.get(rid)
			#log(rid, "  ", data.distance)
			if(eaten != 0.0){
				if((data.distance<min_dist) and (rid!=0)){
					min_dist = data.distance
					min_dist_fish_angle = data.azimuth
					min_dist_fish_id = rid
				}
			}
			if(data.distance<16.0){
				log("eaten ", rid)
				v.put(rid,0.0)
			}
			})

	fish_info = {.dist = min_dist, .angle = min_dist_fish_angle, .id = min_dist_fish_id}
	return fish_info

}

function escape_shark(){


	know_shark_close()
	shark_close = v.get("fish_see_shark")
	#log(shark)
	eaten = v.get(id)

	if(eaten!=0.0){
		if(shark_close==1.0){
			shark_dist = 0
			shark_ang = 0
			neighbors.foreach(
		  		function(rid, data) {
					if(rid == 0){
						shark_dist = data.distance
						shark_ang = data.azimuth
					}})
			# var my_shark_data = {.dist = shark_dist, .ang = shark_ang}
			# v.put(id, my_shark_data)

			if(rand_num>0.5){
				#log(id, ": going to shark")
				x = fish_speed*math.cos(shark_ang+math.pi)
				y = fish_speed*math.sin(shark_ang+math.pi)
				goto(x,y)
			}
			else if(rand_num<=0.5){
				x = fish_speed*math.cos(shark_ang)
				y = fish_speed*math.sin(shark_ang)
				goto(x,y)
			}
		}
		# else{
		# 	log(id, " cant see shark")
		# }
	}
	else{
		log(id, " is eaten")

		shark_dist = 0
		shark_ang = 0
		neighbors.foreach(
			function(rid, data) {
				if(rid == 0){
					shark_dist = data.distance
					shark_ang = data.azimuth
				}})

		if(shark_dist<100.0){
			x = fish_speed*math.cos(shark_ang+math.pi)
			y = fish_speed*math.sin(shark_ang+math.pi)
			goto(x,y)
		}
		else{
			# var a = findlight()
			# goto(a.x*fish_speed, a.y*fish_speed)
			set_wheels(0.0,0.0)
		}
	}

}

function know_shark_close(){
	shark_dist = 0
	neighbors.foreach(
  		function(rid, data) {
			if(rid == 0){
				shark_dist = data.distance
				#log(id, " ", data.distance)
			}})
	#log("shark is ", shark_dist, " away from ", id)
	if(shark_dist<100){
		#can see shark_dist
		v.put("fish_see_shark", 1.0)
		#log(id, " sees shark")
	}
}

function findlight(){
	var counter = 0.0
	var max_light = 0.0
	var max_light_angle = 0.0
	var same = false
	while (counter < 8.0){
		var sensor_val = light[counter]
		var l = sensor_val.value
		var angle = sensor_val.angle
		if (l > max_light){
			max_light = l
			max_light_angle = angle
		}
		counter = counter + 1.0
	}

	var vector = {
		.x = (max_light) * math.cos(max_light_angle),
		.y = (max_light) * math.sin(max_light_angle)
	}

	return vector

}

function reset() {
   # put your code here
}



function destroy() {
   # put your code here
}
